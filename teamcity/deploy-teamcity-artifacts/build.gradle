import org.apache.ivy.core.module.descriptor.Artifact
import org.gradle.api.artifacts.maven.MavenDeployer
import org.gradle.api.artifacts.maven.MavenPom


apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'java'
apply from:   'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/wrapper.gradle'

/**
 * Gradle script deploying TeamCity artifacts to Artifactory repository
 * by downloading releases and unpacking them.
 * http://confluence.jetbrains.net/display/TW/Previous+Releases+Downloads
 */

final String     teamCityVersions = '8.0.3 8.0.2 8.0.1 8.0 7.1.5 7.1.4 7.1.3 7.1.2 7.1.1 7.1 7.0.4 7.0.3 7.0.2 7.0.1 7.0 6.5.6 6.5.5 6.5.4 6.5.3 6.5.2 6.5.1 6.5 6.0.3 6.0.2 6.0.1 6.0'
final List<File> files            = [] // Files to be deployed


defaultTasks 'uploadArchives'


group   = 'com.github.goldin.plugins.teamcity'
version = '0.1'


idea.project {

    jdkName = '1.7'

    ipr.withXml {
        provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.with {
            delegate.@directory = '$PROJECT_DIR$/../..'
            delegate.@vcs       = 'Git'
        }
    }
}


idea.module {
    excludeDirs += file( 'build' )
    excludeDirs += file( 'download' )
    excludeDirs += file( '.gradle' )
}


uploadArchives {
    dependsOn 'downloadTeamCityArtifacts'
    doFirst   {
        assert files, 'No files downloaded'
        files.each{ assert it.file }
        println "Uploading [${ files.size()}] files to [${ repositories.mavenDeployer.repository.url }]"
    }
    repositories.mavenDeployer {
        repository( url: 'http://evgenyg.artifactoryonline.com/evgenyg/temp/' ){
            authentication( userName: 'temp-deployer', password: '{DESede}xtnt3nnvIKDvPdrT+lZJmUuA3LJ4WBNW' )
        }
    }
}



task downloadTeamCityArtifacts << {

    final Project project      = project
    final File    downloadsDir = new File( project.buildDir, 'download' )
    assert ( downloadsDir.directory || downloadsDir.mkdirs())

    for ( teamCityVersion in teamCityVersions.split())
    {
        try       { files.addAll( downloadArtifacts( project, teamCityVersion, downloadsDir )) }
        catch (e) { project.logger.error( "Failed to download and unpack TeamCity [$teamCityVersion] artifacts", e )}
    }
}


/**
 * Downloads artifacts of TeamCity version specified and adds them as project's artifacts.
 */
List<File> downloadArtifacts ( Project project, String teamCityVersion, File downloadsDir )
{
    assert project && teamCityVersion && downloadsDir.directory

    final List<File> files        = []
    final String     downloadLink = "http://download.jetbrains.com/teamcity/TeamCity-${ teamCityVersion }.tar.gz"
    //                              "http://download.labs.intellij.net/teamcity/TeamCity-${ teamCityVersion }.tar.gz"
    final File       archiveFile  = new File( downloadsDir, "TeamCity-${ teamCityVersion }.tar.gz" )
    final File       unpackDir    = new File( downloadsDir, "TeamCity-${ teamCityVersion }" )
    final Closure    addFile      = {
        List<String> filePaths, String artifactId ->
        final  file = filePaths.collect { new File( unpackDir, "TeamCity/$it" ) }.find { it.file }
        assert file, "None of $filePaths correspond to existing file in [$unpackDir.canonicalPath]"
        files << addArtifact( project, file, 'teamcity', artifactId, teamCityVersion )
    }

    /**
     * Certain versions may already be downloaded by previous attempts
     */
    if ( ! unpackDir.directory )
    {
        assert (( ! archiveFile.file ) || archiveFile.delete()), \
               "Failed to delete old [${ archiveFile.canonicalPath }]"

        println "Downloading [$downloadLink] to [$archiveFile]"
        ant.get( src: downloadLink, dest: archiveFile, verbose: 'on' )
        println "Done"

        println "Unpacking [$archiveFile] to [$unpackDir]"
        ant.untar( src: archiveFile, dest: unpackDir, compression: 'gzip' )
        println "Done"

        assert archiveFile.delete(), \
               "Failed to delete [${ archiveFile.canonicalPath }]"
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * Note: artifactIds should correspond to those used in 'teamcity.gradle' !
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */


    // "teamcityTest" configuration
    addFile( [ 'devPackage/tests/tests-support.jar' ],        'tests' )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/jmock-SNAPSHOT.jar',
               'devPackage/tests/jmock-SNAPSHOT.jar',
               'devPackage/tests/jmock-1.2.0.jar' ],          'jmock' )

    // "teamcityCommon" configuration
    addFile( [ 'lib/servlet-api.jar'                      ],    'servlet-api'   )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/common-api.jar'  ],    'common-api'    )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/annotations.jar' ],    'annotations'   )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/util.jar'        ],    'util'          )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/jdom.jar'        ],    'jdom'          )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/spring.jar'      ],    'spring'        )

    // "teamcityCommonEx" configuration
    addFile( [ 'webapps/ROOT/WEB-INF/lib/common-impl.jar' ],    'common-impl'   )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/openapi.jar'     ],    'idea-openapi'  )

    // "teamcityServer" configuration
    addFile( [ 'webapps/ROOT/WEB-INF/lib/server-api.jar'    ],  'server-api'    )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/spring-webmvc.jar' ],  'spring-webmvc' )

    // "teamcityServerEx" configuration
    addFile( [ 'webapps/ROOT/WEB-INF/lib/server.jar' ],         'server'        )
    addFile( [ 'webapps/ROOT/WEB-INF/lib/web.jar'    ],         'web'           )

    // "teamcityAgent" configuration
    addFile( [ 'buildAgent/lib/agent-openapi.jar' ],            'agent-api'     )

    // "teamcityAgentEx" configuration
    addFile( [ 'buildAgent/lib/agent.jar' ],                    'agent'         )

    files
}


/**
 * Adds file specified as a new artifact with coordinates specified.
 */
File addArtifact( Project project, File file, String groupId, String artifactId, String version )
{
    assert project && file && groupId && artifactId && version
    assert file.file, "[${ file.canonicalPath }] - not found"

    final Upload          uploadTask = ( Upload ) project.tasks[ 'uploadArchives' ]
    final MavenDeployer   deployer   = ( MavenDeployer ) uploadTask.repositories[ 'mavenDeployer' ]
    final PublishArtifact artifact   = project.artifacts.add( 'archives', file )
    final MavenPom        pom        = deployer.addFilter( "${ file.name }-${ version }" ){ Artifact a, File f -> ( file == f )}

    assert artifact.file == file

    pom.groupId    = groupId
    pom.artifactId = artifactId
    pom.version    = version

    println "[${ file.canonicalPath }] added as \"$groupId:$artifactId:$version\" artifact"
    artifact.file
}
