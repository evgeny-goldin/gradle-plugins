import org.gradle.api.GradleException
import org.gradle.api.Project
import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.Dependency


/**
 * ---------------------------------------------------------------
 * Gradle script to be included for using TeamCity Gradle plugin:
 * apply from: "https://raw.github.com/evgeny-goldin/gradle-plugins/master/teamcity/teamcity.gradle"
 * ---------------------------------------------------------------
 */

apply plugin: 'teamcity'


final Project      _p_               = project.rootProject
final List<String> _knownVersions_   = '8.0 7.1.5 7.1.4 7.1.3 7.1.2 7.1.1 7.1 7.0.4 7.0.3 7.0.2 7.0.1 7.0 6.5.6 6.5.5 6.5.4 6.5.3 6.5.2 6.5.1 6.5 6.0.3 6.0.2 6.0.1 6.0'.tokenize()
final String       _teamCityVersion_ = _p_.hasProperty( 'teamCityVersion' ) ? _p_.properties[ 'teamCityVersion' ] : '7.1.5'

assert _teamCityVersion_ in _knownVersions_, "'teamCityVersion' value should be one of $_knownVersions_"

_p_.logger.info( "TeamCity version is [$_teamCityVersion_]" )


buildscript {
    repositories {
        maven { url 'http://jcenter.bintray.com' }
        maven { url 'http://dl.bintray.com/content/evgenyg/BuildTools' }
    }
    dependencies { classpath 'com.github.goldin.plugins.gradle:teamcity:0.2.8' }
}


allprojects {

    /**
     * TeamCity artifacts repository.
     */
    repositories { maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/teamcity/' }}


    configurations {
        teamcityTest
        teamcityCommon
        teamcityCommonEx { extendsFrom teamcityCommon }
        teamcityServer   { extendsFrom teamcityCommon }
        teamcityServerEx { extendsFrom teamcityServer, teamcityCommonEx }
        teamcityAgent    { extendsFrom teamcityCommon }
        teamcityAgentEx  { extendsFrom teamcityAgent,  teamcityCommonEx }
    }

    dependencies {

        teamcityTest     "teamcity:tests:$_teamCityVersion_",
                         "teamcity:jmock:$_teamCityVersion_"

        teamcityCommon   "teamcity:servlet-api:$_teamCityVersion_",
                         "teamcity:common-api:$_teamCityVersion_",
                         "teamcity:annotations:$_teamCityVersion_",
                         "teamcity:util:$_teamCityVersion_",
                         "teamcity:jdom:$_teamCityVersion_",
                         "teamcity:spring:$_teamCityVersion_"

        teamcityCommonEx "teamcity:common-impl:$_teamCityVersion_",
                         "teamcity:idea-openapi:$_teamCityVersion_"

        teamcityServer   "teamcity:server-api:$_teamCityVersion_",
                         "teamcity:spring-webmvc:$_teamCityVersion_"

        teamcityServerEx "teamcity:server:$_teamCityVersion_",
                         "teamcity:web:$_teamCityVersion_"

        teamcityAgent    "teamcity:agent-api:$_teamCityVersion_"

        teamcityAgentEx  "teamcity:agent:$_teamCityVersion_"
    }


    /**
     * Verifying no forbidden dependencies (spring, jdom, servlet-api) are explicitly used.
     */
    _p_.gradle.taskGraph.whenReady {

        final errors                = []
        final configurations        = _p_.allprojects*.configurations*.asMap.flatten()
        final compileConfigurations = ( configurations*.getAt( 'compile' ) + configurations*.getAt( 'testCompile' )).grep()

        for ( Configuration compileConfiguration in compileConfigurations )
        {
            final Set<Dependency> badDependencies = compileConfiguration.dependencies.findAll {
                Dependency d ->
                ( d.group in [ 'org.jetbrains.teamcity', 'teamcity', 'org.jdom' ]) ||
                ( d.name  in [ 'servlet-api', 'spring', 'spring-core', 'spring-webmvc', 'jdom' ])
            }

            final Configuration teamcityConfiguration = compileConfiguration.extendsFrom.find { it.name.startsWith( 'teamcity' )}

            if ( badDependencies && teamcityConfiguration )
            {
                final dependencies = "dependenc${ badDependencies.size() == 1 ? 'y' : 'ies' } " +
                                     badDependencies.collect { "$it.group:$it.name:$it.version" }

                errors << "$compileConfiguration - $dependencies should not be used, already provided by $teamcityConfiguration."
            }
        }

        if ( errors ) { throw new GradleException( errors.join( '\n' )) }
    }
}
