assert project && rootProject

def    codenarcProp                = { String name, Object defaultValue -> project.hasProperty( name ) ? project.property( name ) : defaultValue }
String codenarcVersion             = codenarcProp( 'codenarcVersion',      '0.18.1' )
List   codenarcSources             = ( List ) codenarcProp( 'codenarcSources',      [ 'src/main/groovy', 'src/test/groovy' ] )
List   codenarcRuleSetFiles        = ( List ) codenarcProp( 'codenarcRuleSetFiles', [ 'http://codenarc.sourceforge.net/StarterRuleSet-AllRulesByCategory.groovy.txt' ] )
List   codenarcExtensions          = ( List ) codenarcProp( 'codenarcExtensions',   [ '**/*.groovy', '**/*.gradle' ] )
String codenarcReportDir           = codenarcProp( 'codenarcReportDir',    'reports' )
String codenarcReportType          = codenarcProp( 'codenarcReportType',   'html' )
String codenarcReportTitle         = codenarcProp( 'codenarcReportTitle',  'CodeNarc Report' )
String codenarcReportFile          = codenarcProp( 'codenarcReportFile',   'codenarc.html' )
String codenarcPriority1Violations = codenarcProp( 'codenarcPriority1Violations', 0 )
String codenarcPriority2Violations = codenarcProp( 'codenarcPriority2Violations', 0 )
String codenarcPriority3Violations = codenarcProp( 'codenarcPriority3Violations', 0 )
File codenarcReportDirObject       = new File(( File ) project.buildDir, codenarcReportDir  )
File codenarcReportFileObject      = new File( codenarcReportDirObject,  codenarcReportFile )
List codenarcSourceDirs            = codenarcSources.findAll{ it }.collect{ project.file( it ) }.findAll { it.directory }
List codenarcRuleSetFilesConverted = codenarcRuleSetFiles.findAll{ it }.collect {
    ( it.startsWith( 'http://' ) ? it : 'file:' + rootProject.file( it ).canonicalPath )
}


repositories   { maven { url 'http://jcenter.bintray.com/' }}
configurations { codenarc }
dependencies   {
    codenarc 'org.apache.ant:ant-launcher:1.9.0',
             'org.codehaus.groovy:groovy-all:2.1.3',
             'org.gmetrics:GMetrics:0.6',
             'junit:junit:4.11',
             'log4j:log4j:1.2.17',
    codenarc ( "org.codenarc:CodeNarc:$codenarcVersion" ){
        exclude group: 'log4j'
        exclude group: 'junit'
        exclude group: 'ant'
        exclude group: 'org.apache.ant'
        exclude group: 'org.codehaus.groovy'
        exclude group: 'org.gmetrics'
    }
}


/**
 * Runs CodeNarc inspections on Groovy/Gradle sources.
 */
task codenarc() {

    description = 'Runs CodeNarc inspections on Groovy/Gradle sources.'
    inputs.files codenarcRuleSetFilesConverted.findAll { it.startsWith( 'file:' ) }
    codenarcSourceDirs.each{ inputs.dir it }
    outputs.file codenarcReportFileObject

    doFirst {

        assert codenarcSourceDirs,                                      "No source directories found: $codenarcSources"
        assert codenarcReportDirObject.with{ directory   || mkdirs() }, "Failed to create [$codenarcReportDirObject.canonicalPath]"
        assert codenarcReportFileObject.with{ ( ! file ) || delete() }, "Failed to delete [$codenarcReportFileObject.canonicalPath]"

        logger.log( LogLevel.INFO, """
        |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        | Generating CodeNarc report
        |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        | RuleSet files         : $codenarcRuleSetFilesConverted
        | Source dirs           : ${ codenarcSourceDirs*.canonicalPath }
        | Extensions            : ${ codenarcExtensions }
        | Report file           : [$codenarcReportFileObject.canonicalPath]
        | Priority 1 violations : [$codenarcPriority1Violations]
        | Priority 2 violations : [$codenarcPriority2Violations]
        | Priority 3 violations : [$codenarcPriority3Violations]
        |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~""".stripMargin() )

        /**
         * http://codenarc.sourceforge.net/codenarc-ant-task.html
         */
        ant.taskdef( name      : 'codenarc',
                     classname : 'org.codenarc.ant.CodeNarcTask',
                     classpath : configurations.codenarc.asPath )

        ant.codenarc ( ruleSetFiles           : codenarcRuleSetFilesConverted.join( ',' ),
                       maxPriority1Violations : codenarcPriority1Violations,
                       maxPriority2Violations : codenarcPriority2Violations,
                       maxPriority3Violations : codenarcPriority3Violations ) {
             report    ( type  : codenarcReportType ) {
                option ( name  : 'outputFile',
                         value : codenarcReportFileObject.canonicalPath )
                option ( name  : 'title',
                         value : codenarcReportTitle )
             }
             codenarcSourceDirs.each {
                 fileset( dir : it, includes : codenarcExtensions.join( ',' ))
             }
        }
    }
}
