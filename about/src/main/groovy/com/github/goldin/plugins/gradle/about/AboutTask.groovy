package com.github.goldin.plugins.gradle.about

import com.github.goldin.plugins.gradle.common.BaseTask
import org.gcontracts.annotations.Ensures
import org.gcontracts.annotations.Requires
import org.gradle.api.tasks.bundling.Zip


/**
 * {@link AboutPlugin} task
 */
class AboutTask extends BaseTask<AboutExtension>
{
    @Override
    Class extensionType (){ AboutExtension }

    @Delegate AboutHelper helper

    @Override
    void verifyUpdateExtension ( String description ) {}


    void taskAction()
    {
        helper = new AboutHelper( this.project, this, this.ext )

        try
        {
            final tasks    = tasksToUpdate()
            final archives = archivesToUpdate()

            if ( tasks || archives )
            {
                updateArchives( tasks, archives )
            }
            else
            {
                failOrWarn( ext.failIfNotFound, 'Unable to find archive tasks or archives to update' )
            }
        }
        catch ( Throwable error )
        {
            failOrWarn( ext.failOnError, 'Failed to run \'about\'', error )
        }
    }


    /**
     * Retrieves archive tasks to be updated by the plugin.
     * @return   archive tasks to be updated by the plugin
     */
    @Ensures({ result != null })
    private List<Zip> tasksToUpdate()
    {
        if ( ! ext.zipTasks ) { return [] }
        ext.tasks ?: project.tasks.withType( Zip ).toList()
    }


    /**
     * Retrieves archives to be updated by the plugin.
     * @return   archives to be updated by the plugin
     */
    @Ensures({ result != null })
    private List<File> archivesToUpdate ()
    {
        if ( ! ext.patterns ) { return [] }

        final baseDir = ext.directory ?: project.buildDir
        baseDir.directory ? files( baseDir, ext.include, ext.exclude, true, false, false ) : []
    }


    /**
     * Creates about file
     * @return about file generated, should be deleted when task has finished!
     */
    @Ensures({ result.file })
    private File createAboutFile ()
    {
        final aboutFile = new File( temporaryDir, ext.fileName ?: 'about.txt' )

        log { "Generating 'about' in [$aboutFile.canonicalPath]" }

        final aboutContent = ( " Generated by http://evgeny-goldin.com/wiki/Gradle-about-plugin, version [${ pluginVersion() }]\n" +
                               serverContent() + scmContent() + buildContent()).
                             stripMargin().readLines()*.replaceAll( /\s+$/, '' ).grep().
                             join(( 'windows' == ext.endOfLine ) ? '\r\n' : '\n' )

        write( aboutFile, aboutContent )
    }


    @Ensures({ result })
    private String pluginVersion ()
    {
        final properties = new Properties()
        properties.load( getResource( 'META-INF/gradle-plugins/about.properties' ))
        properties[ 'version' ] ?: 'unknown'
    }


    /**
     * Updates all archives with the "about" data.
     *
     * @param tasks    archive tasks to update
     * @param archives zip archives to update
     */
    @Requires({ tasks || archives })
    private void updateArchives( List<Zip> tasks, List<File> archives )
    {
        final aboutFile = createAboutFile()
        final prefix    = (( ext.prefix == '/' ) ? '' : ext.prefix )

        for ( task in tasks )
        {
            if ( task.state.executed )
            {
                archives << task.archivePath
            }
            else
            {
                log{ "Adding 'about' to $task" }
                task.into( prefix ){ from( aboutFile ) }
            }
        }

        for ( archive in archives )
        {
            assert archive.file, "[$archive] - not found"
            final aboutPath = "$archive.canonicalPath!$prefix${ ( prefix && ( ! prefix.endsWith( '/' ))) ? '/' : '' }${ aboutFile.name }"
            log{ "Adding 'about' to [$aboutPath]" }
            ant.zip( destfile : archive, update : true ){ zipfileset( file : aboutFile, prefix : prefix )}
        }
    }
}
